# network configuration for the internal communication between the services.
# We have to do the configuration as all the services will use theirs own network.
networks:
  dibnet:
    driver: "bridge"

services:
#  rabbit:
#    image: "rabbitmq:3.13-management"
#    hostname: rabbitmq
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    healthcheck:
#      test: rabbitmq-diagnostics check_port_connectivity
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 5s
  configserver:
    image: "4599112/config-server:latest"
    container_name: "config_server"
    depends_on:
      rabbit:
        condition: service_healthy
    ports:
      - "8071:8071"
    healthcheck:
      # this command will fetch the readiness endpoint and check if the service is up or not
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s # this will try to execute the health check command after 5s(start_period) if there is a falure retry 10 (retries) times with the interval of 10s(interval) and inside each check it has to wait maximum 5s(timeout) to get the response from the health check url
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - dibnet
  accounts:
    image: "4599112/account-service:latest"
    container_name: "accounts_service_1"
    ports:
      - "1111:2023"
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - dibnet
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/" #The 2nd config server is according to the service name in docker compose
      SPRING_PROFILE_ACTIVE: "local"
  loans:
    image: "4599112/loans-service:latest"
    container_name: "loans_service_1"
    ports:
      - "2222:2024"
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - dibnet
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/" #The 2nd config server is according to the service name in docker compose
      SPRING_PROFILE_ACTIVE: "local"
  cards:
    image: "4599112/cards-service:latest"
    container_name: "cards_service_1"
    ports:
      - "3333:2025"
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - dibnet
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/" #The 2nd config server is according to the service name in docker compose
      SPRING_PROFILE_ACTIVE: "local"
